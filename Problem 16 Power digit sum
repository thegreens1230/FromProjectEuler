/**
 * Problem 16 Power digit sum
 * 根据规律有   2^(2n)  的 sum  为 2^n的sum 的2n-1倍(这个规律好像没有太大作用，换)
 * 直接计算2^1000次方，每次乘2，将每个数字存在集合中
 */
package com.test;
import java.util.*;

public class Test16 {
	//用于存储数值的数组
	ArrayList<Integer> arr = null;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Test16 ts = new Test16();
		ts.getPow();
		
	}
	public void getPow(){
		//总和
		int digitSum = 0;
		//临时的数
		int temp = 0;
		//幂次
		final int N = 1000;
		arr = new ArrayList<Integer>();
		//添加第一个数 1
		arr.add(1);
		//2的幂的次数，进行循环
		for(int i=1;i<=N;i++){
			//对集合中每个数进行*2的计算
			for(int j=0;j<arr.size();j++){
				temp = arr.get(j)*2 + temp;
				if(temp < 10){
					arr.set(j, temp);
					//重置为0
					temp = 0;
				}else{
					arr.set(j, temp%10);
					//当*2之后，十位数最大值为1
					temp = 1;
				}
			}
//			考虑到第一位数可能要进位
			if(temp == 1){
				arr.add(1);
				temp = 0;
			}
		}
		for(int i=arr.size()-1;i>-1;i--){
			System.out.println(arr.get(i));
			digitSum +=arr.get(i);
		}
		System.out.println(digitSum);
	}
}
