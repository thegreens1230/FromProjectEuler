/*执行效率比较低，话费的时间是O(N^2)
*/

package com.test;
import java.util.*;

public class Test23 {
	public static int N = 28123;
	public ArrayList<Integer> abNum = new ArrayList<Integer>();
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Test23 t = new Test23();
		t.getabNum();
		t.findSums();

	}
	public void findSums(){
		int sum = 0;
		for(int i=1;i<N;i++){
			if(!this.sumOf2Anum(i)){
				sum += i;
				System.out.println(i);
			}
		}
		System.out.println(sum);
	}
	//判断一个数是否是两个富数的和
	private boolean sumOf2Anum(int num){
		boolean flag = false;
		for(int i=12;i<=num/2;i++){
			if(this.abNum.contains(i) && this.abNum.contains(num-i)){
				flag = true;
				break;
			}
		}
		return flag;
	}
	//将1-N的所有富数先计算出来并存于数组中
	private void getabNum(){
		for(int i=12;i<N;i++){
			if(this.abundNum(i)){
				this.abNum.add(i);
			}
		}
	}
	//判断一个数是否是 富数
	private boolean abundNum(int num){
//		ArrayList<Integer> divisors = new ArrayList<Integer>();
		boolean flag = false;
		int sums = 0;
		for(int i=1;i<=num/2;i++){
			if(num%i == 0){
//				divisors.add(i);
				sums += i;
			}
		}
		if(sums > num){
			flag = true;
		}
		return flag;
	}

}
